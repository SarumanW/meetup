#User DAO
user.findByLogin=SELECT USER_ID,login, password, name, surname, email, timezone, image_filepath, bday, phone, pined_event_id, periodical_email \
  FROM UUSER WHERE LOGIN = ?
user.findById=SELECT USER_ID,login, password, name, surname, email, timezone, image_filepath, bday, phone, pined_event_id, periodical_email \
  FROM UUSER WHERE USER_ID = ?
user.findByEmail=SELECT USER_ID,login, password, name, surname, email, timezone, image_filepath, bday, phone, pined_event_id, periodical_email \
  FROM UUSER WHERE EMAIL = ?
user.findByParams=SELECT USER_ID, login, password, name, surname, email, timezone, image_filepath, bday, phone, pined_event_id, periodical_email \
FROM UUSER WHERE UPPER(login) LIKE UPPER(?) AND UPPER(name) LIKE UPPER(?) AND UPPER(surname) LIKE UPPER(?) AND ROWNUM <= ?
user.update=UPDATE UUSER SET LOGIN = ?, NAME = ?, SURNAME = ?, EMAIL = ?, \
  TIMEZONE = ?, IMAGE_FILEPATH = ?, BDAY = ?, PHONE = ? WHERE USER_ID = ?
user.updatePassword=UPDATE UUSER SET PASSWORD = ? WHERE USER_ID = ?
user.delete=DELETE FROM UUSER WHERE USER_ID = ?
user.getFriends = SELECT * FROM UUSER \
    WHERE USER_ID IN ( \
        SELECT SENDER_ID FROM FRIEND \
            WHERE RECEIVER_ID = ? AND IS_CONFIRMED = 1 \
        ) OR USER_ID IN ( \
        SELECT RECEIVER_ID FROM FRIEND \
            WHERE SENDER_ID = ? AND IS_CONFIRMED = 1)
user.getUnconfirmedFriends=SELECT * FROM UUSER \
    WHERE USER_ID IN ( \
        SELECT SENDER_ID FROM FRIEND \
            WHERE RECEIVER_ID = ? AND IS_CONFIRMED = 0 )
user.confirmFriend=UPDATE FRIEND SET IS_CONFIRMED=1 \
  where SENDER_ID=? AND RECEIVER_ID=?
user.deleteFriend=DELETE FROM FRIEND \
  WHERE ((SENDER_ID=? and RECEIVER_ID=?) OR (SENDER_ID=? and RECEIVER_ID=?))
user.isLoginFree=SELECT count(*) AS num FROM uuser \
  WHERE login = ?
user.isEmailFree=SELECT count(*) AS num FROM uuser \
  WHERE email = ?
user.getNotFriends=select * from UUSER \
  where USER_ID <> ? and USER_ID not in (select RECEIVER_ID from FRIEND where SENDER_ID = ? and IS_CONFIRMED = 1) \
  and UPPER(login) LIKE UPPER(?)
user.getByEmailPeriod=SELECT * FROM UUSER \
  WHERE periodical_email = ?
user.limitSearchConst=10
#Folder DAO
folder.getUserFolders=SELECT FOLDER_ID, NAME, USER_ID \
  FROM FOLDER \
  WHERE USER_ID = ?
folder.getById=SELECT FOLDER_ID, NAME, USER_ID \
  FROM FOLDER \
  WHERE FOLDER_ID = ? AND USER_ID = ?
folder.getByName=SELECT FOLDER_ID, NAME, USER_ID \
  FROM FOLDER \
  WHERE NAME = ?
folder.update=UPDATE FOLDER \
  SET NAME = ? \
  WHERE FOLDER_ID = ?
folder.delete=DELETE FROM FOLDER \
  WHERE FOLDER_ID = ?
folder.removeEvents=UPDATE EVENT E \
  SET FOLDER_ID = (SELECT FOLDER_ID \
                     FROM FOLDER \
                     WHERE NAME = 'general' AND USER_ID =(SELECT USER_ID \
                                                          FROM USER_EVENT \
                                                          WHERE EVENT_ID = E.EVENT_ID)) \
  WHERE FOLDER_ID = ?
#Event DAO
event.findByUserId=SELECT E.EVENT_ID EVENT_ID , E.NAME NAME, EVENT_DATE, DESCRIPTION, E.PERIODICITY_ID PERIODICITY_ID, P.PERIODICITY_NAME PERIODICITY_NAME, PLACE, \
  E.EVENT_TYPE_ID EVENT_TYPE_ID, TYPE, IS_DRAFT, FOLDER_ID, IMAGE_FILEPATH, UE.USER_ID OWNER_ID \
  FROM EVENT E \
  INNER JOIN PERIODICITY P ON E.PERIODICITY_ID = P.PERIODICITY_ID \
  INNER JOIN EVENT_TYPE ET ON E.EVENT_TYPE_ID = ET.EVENT_TYPE_ID \
  INNER JOIN USER_EVENT UE ON E.EVENT_ID = UE.EVENT_ID \
  INNER JOIN RROLE R ON UE.ROLE_ID = R.ROLE_ID \
  WHERE UE.USER_ID = ? AND E.EVENT_TYPE_ID<>2
event.findById=SELECT E.EVENT_ID EVENT_ID , E.NAME NAME, EVENT_DATE, DESCRIPTION, E.PERIODICITY_ID PERIODICITY_ID, P.PERIODICITY_NAME PERIODICITY_NAME, PLACE, \
  E.EVENT_TYPE_ID EVENT_TYPE_ID, TYPE, IS_DRAFT, FOLDER_ID, IMAGE_FILEPATH, UE.USER_ID OWNER_ID \
  FROM EVENT E \
  INNER JOIN PERIODICITY P ON E.PERIODICITY_ID = P.PERIODICITY_ID \
  INNER JOIN EVENT_TYPE ET ON E.EVENT_TYPE_ID = ET.EVENT_TYPE_ID \
  INNER JOIN USER_EVENT UE ON E.EVENT_ID = UE.EVENT_ID \
  INNER JOIN RROLE R ON UE.ROLE_ID = R.ROLE_ID \
  WHERE E.EVENT_ID = ? AND R.NAME = 'OWNER'
event.update=UPDATE EVENT \
  SET NAME = ?, EVENT_DATE = TO_TIMESTAMP( ?, 'YYYY-MM-DD HH24:MI:SS.FF'), DESCRIPTION = ?, \
  PERIODICITY_ID = ?, PLACE = ?, EVENT_TYPE_ID = ?, IS_DRAFT = ?, FOLDER_ID = ?, IMAGE_FILEPATH = ? \
  WHERE EVENT_ID = ?
event.delete=DELETE FROM EVENT \
  WHERE EVENT_ID = ?
event.findByFolderId=SELECT EVENT_ID , NAME, EVENT_DATE, DESCRIPTION, E.PERIODICITY_ID PERIODICITY_ID, P.PERIODICITY_NAME PERIODICITY_NAME, PLACE,\
  E.EVENT_TYPE_ID EVENT_TYPE_ID, TYPE, IS_DRAFT, FOLDER_ID, IMAGE_FILEPATH, 0 OWNER_ID \
  FROM EVENT E \
  INNER JOIN PERIODICITY P ON E.PERIODICITY_ID = P.PERIODICITY_ID \
  INNER JOIN EVENT_TYPE ET ON E.EVENT_TYPE_ID = ET.EVENT_TYPE_ID \
  WHERE FOLDER_ID = ?
event.getParticipants=SELECT us.user_id user_id,login, password, us.name name, surname, email, timezone, image_filepath, bday, phone \
  FROM uuser us \
  INNER JOIN user_event ue ON us.user_id = ue.user_id \
  INNER JOIN rrole r ON ue.role_id = r.role_id \
  WHERE ue.event_id = ? AND r.name = 'PARTICIPANT'
event.findByTypeInFolder=SELECT E.EVENT_ID EVENT_ID , E.NAME NAME, EVENT_DATE, DESCRIPTION, E.PERIODICITY_ID PERIODICITY_ID, P.PERIODICITY_NAME PERIODICITY_NAME, PLACE,\
  E.EVENT_TYPE_ID EVENT_TYPE_ID, TYPE, IS_DRAFT, FOLDER_ID, IMAGE_FILEPATH, UE.USER_ID OWNER_ID \
  FROM EVENT E \
  INNER JOIN PERIODICITY P ON E.PERIODICITY_ID = P.PERIODICITY_ID \
  INNER JOIN EVENT_TYPE ET ON E.EVENT_TYPE_ID = ET.EVENT_TYPE_ID \
  INNER JOIN USER_EVENT UE ON E.EVENT_ID = UE.EVENT_ID \
  WHERE ET.TYPE = ? and E.FOLDER_ID = ? and IS_DRAFT = 0 and UE.ROLE_ID = 1
event.getDrafts=SELECT E.EVENT_ID EVENT_ID , E.NAME NAME, EVENT_DATE, DESCRIPTION, E.PERIODICITY_ID PERIODICITY_ID, P.PERIODICITY_NAME PERIODICITY_NAME, PLACE,\
  E.EVENT_TYPE_ID EVENT_TYPE_ID, TYPE, IS_DRAFT, FOLDER_ID, IMAGE_FILEPATH, UE.USER_ID OWNER_ID \
  FROM EVENT E \
  INNER JOIN PERIODICITY P ON E.PERIODICITY_ID = P.PERIODICITY_ID \
  INNER JOIN EVENT_TYPE ET ON E.EVENT_TYPE_ID = ET.EVENT_TYPE_ID \
  INNER JOIN USER_EVENT UE ON E.EVENT_ID = UE.EVENT_ID \
  WHERE IS_DRAFT = 1 AND E.FOLDER_ID = ?
event.deleteParticipants=DELETE user_event \
  WHERE EVENT_ID = ? AND ROLE_ID = 2
event.deleteMembers=DELETE FROM user_event \
  WHERE event_id = ?
event.deleteParticipant=DELETE FROM user_event \
  WHERE EVENT_ID = ? AND role_id = 2 AND USER_ID = ( \
    SELECT user_id \
    FROM uuser \
    WHERE login = ? \
  )
event.getInPeriod=SELECT E.EVENT_ID EVENT_ID , E.NAME NAME, EVENT_DATE, DESCRIPTION, E.PERIODICITY_ID PERIODICITY_ID, P.PERIODICITY_NAME PERIODICITY_NAME, PLACE, \
  E.EVENT_TYPE_ID EVENT_TYPE_ID, TYPE, IS_DRAFT, FOLDER_ID, IMAGE_FILEPATH, UE.USER_ID OWNER_ID \
  FROM EVENT E \
  INNER JOIN PERIODICITY P ON E.PERIODICITY_ID = P.PERIODICITY_ID \
  INNER JOIN EVENT_TYPE ET ON E.EVENT_TYPE_ID = ET.EVENT_TYPE_ID \
  INNER JOIN USER_EVENT UE ON E.EVENT_ID = UE.EVENT_ID \
  WHERE UE.USER_ID = ? AND E.EVENT_DATE >= TO_TIMESTAMP( ?, 'YYYY-MM-DD HH24:MI:SS.FF') \
  AND E.EVENT_DATE <= TO_TIMESTAMP( ?, 'YYYY-MM-DD HH24:MI:SS.FF') \
  AND E.EVENT_TYPE_ID<>2
event.getInPeriodAllUsers=SELECT E.EVENT_ID EVENT_ID , E.NAME NAME, EVENT_DATE, DESCRIPTION, E.PERIODICITY_ID PERIODICITY_ID, P.PERIODICITY_NAME PERIODICITY_NAME, PLACE, \
  E.EVENT_TYPE_ID EVENT_TYPE_ID, TYPE, IS_DRAFT, FOLDER_ID, IMAGE_FILEPATH, UE.USER_ID OWNER_ID \
  FROM EVENT E \
  INNER JOIN PERIODICITY P ON E.PERIODICITY_ID = P.PERIODICITY_ID \
  INNER JOIN EVENT_TYPE ET ON E.EVENT_TYPE_ID = ET.EVENT_TYPE_ID \
  INNER JOIN USER_EVENT UE ON E.EVENT_ID = UE.EVENT_ID \
  WHERE E.EVENT_DATE >= TO_TIMESTAMP( ?, 'YYYY-MM-DD HH24:MI:SS.FF') \
  AND E.EVENT_DATE <= TO_TIMESTAMP( ?, 'YYYY-MM-DD HH24:MI:SS.FF') \
  AND E.EVENT_TYPE_ID<>2 AND UE.ROLE_ID = 1 AND E.PERIODICITY_ID<6
event.getAllPublic=SELECT E.EVENT_ID EVENT_ID , E.NAME NAME, EVENT_DATE, DESCRIPTION, E.PERIODICITY_ID PERIODICITY_ID, P.PERIODICITY_NAME PERIODICITY_NAME, PLACE, \
  E.EVENT_TYPE_ID EVENT_TYPE_ID, TYPE, IS_DRAFT, FOLDER_ID, IMAGE_FILEPATH, UE.USER_ID OWNER_ID \
  FROM EVENT E \
  INNER JOIN PERIODICITY P ON E.PERIODICITY_ID = P.PERIODICITY_ID \
  INNER JOIN EVENT_TYPE ET ON E.EVENT_TYPE_ID = ET.EVENT_TYPE_ID \
  INNER JOIN USER_EVENT UE ON E.EVENT_ID = UE.EVENT_ID \
  WHERE E.EVENT_TYPE_ID = 1 AND UE.USER_ID<>? AND UPPER(E.NAME) LIKE UPPER(?)

#Role DAO
role.getRole=SELECT r.name name \
  FROM user_event ue \
  INNER JOIN rrole r ON ue.role_id = r.role_id \
  WHERE ue.user_id = ? AND ue.event_id = ?
#Item DAO
item.findById=SELECT I.ITEM_ID, NAME, DESCRIPTION, IMAGE_FILEPATH, LINK, COUNT(LIKE_ID) LIKES \
  FROM ITEM I \
  LEFT JOIN LLIKE L ON I.ITEM_ID = L.ITEM_ID \
  WHERE I.ITEM_ID = ? \
  GROUP BY I.ITEM_ID, NAME, DESCRIPTION, IMAGE_FILEPATH, LINK
item.getItemsIdByUserId=SELECT I.ITEM_ID \
  FROM ITEM I \
  INNER JOIN USER_ITEM UI ON I.ITEM_ID = UI.ITEM_ID \
  WHERE USER_ID = ?
item.delete=DELETE FROM ITEM \
  WHERE ITEM_ID = ?
item.update=UPDATE ITEM \
  SET NAME = ?, DESCRIPTION = ?, IMAGE_FILEPATH = ?, LINK = ? \
  WHERE ITEM_ID = ?
item.getTagByItemId=SELECT NAME \
  FROM TAG_ITEM \
  INNER JOIN TAG T ON TAG_ITEM.TAG_ID = T.TAG_ID \
  WHERE ITEM_ID = ?
item.getPopularItemsIds=SELECT I.ITEM_ID \
  FROM ITEM I \
  INNER JOIN USER_ITEM UI ON I.ITEM_ID = UI.ITEM_ID \
  WHERE  ROWNUM < ? \
  GROUP BY I.ITEM_ID \
  ORDER BY COUNT(USER_ID) DESC
item.updateUserItem= INSERT INTO USER_ITEM (USER_ID, ITEM_ID, ID_WHO_BOOKED, DUE_DATE , PRIORITY_ID) \
  VALUES (?, ?, NULL, TO_TIMESTAMP(?, 'YYYY-MM-DD HH24:MI:SS.FF'), ?)
item.deleteFromWishList= DELETE FROM USER_ITEM \
  WHERE USER_ID = ? AND ITEM_ID=?
item.setBookerId= UPDATE USER_ITEM \
  SET ID_WHO_BOOKED = ? \
  WHERE USER_ID = ? AND ITEM_ID = ?
item.getNumberOfItemUsers= SELECT COUNT(USER_ID) Number_Of_Users \
  FROM USER_ITEM \
  WHERE ITEM_ID = ?
item.getTagIdByName= SELECT NVL((SELECT TAG_ID \
                            FROM TAG \
                            WHERE NAME = ?), 0) TAG_ID \
  FROM dual
item.addTagToItem= INSERT INTO TAG_ITEM (ITEM_ID, TAG_ID) \
  VALUES(?, ?)
item.deleteTags= DELETE FROM TAG_ITEM \
  WHERE ITEM_ID = ?
item.removeLikeByItemIdUserId=DELETE FROM LLIKE \
  WHERE ITEM_ID = ? AND USER_ID = ?
item.updateUserItemInfo=UPDATE USER_ITEM \
  SET PRIORITY_ID = ?, DUE_DATE = TO_TIMESTAMP(?, 'YYYY-MM-DD HH24:MI:SS.FF') \
  WHERE USER_ID = ? AND ITEM_ID = ?
item.getBookedItemsByUserId=SELECT I.ITEM_ID, I.NAME, DESCRIPTION, IMAGE_FILEPATH, LINK, DUE_DATE, UI.USER_ID, ID_WHO_BOOKED, P.PRIORITY_ID, COUNT(LIKE_ID) LIKES \
  FROM ITEM I JOIN USER_ITEM UI on I.ITEM_ID = UI.ITEM_ID \
  INNER JOIN PRIORITY P on UI.PRIORITY_ID = P.PRIORITY_ID \
  LEFT JOIN LLIKE L ON UI.ITEM_ID = L.ITEM_ID \
  WHERE UI.ID_WHO_BOOKED = ? \
  GROUP BY I.ITEM_ID, I.NAME, P.PRIORITY_ID, DESCRIPTION, IMAGE_FILEPATH, LINK, DUE_DATE, UI.USER_ID, ID_WHO_BOOKED
item.getPersonalInfoByUserIdItemId=SELECT UI.USER_ID, ID_WHO_BOOKED, PRIORITY_ID, DUE_DATE \
  FROM USER_ITEM UI \
  WHERE UI.USER_ID = ? AND UI.ITEM_ID = ?
tag.searchTagsName= SELECT NAME \
  FROM TAG \
  WHERE UPPER(NAME) LIKE UPPER(?) AND ROWNUM < ?
item.getLikedUserLoginsById= SELECT UU.LOGIN \
  FROM UUSER UU \
  INNER JOIN LLIKE L ON UU.USER_ID = L.USER_ID \
  WHERE ITEM_ID = ?
item.getLikeIdByUserIdItemId= SELECT LIKE_ID \
  FROM LLIKE \
  WHERE USER_ID = ? AND ITEM_ID = ?
item.getItemsByTagNames= SELECT ITEM_ID \
  FROM TAG_ITEM \
  INNER JOIN TAG T ON TAG_ITEM.TAG_ID = T.TAG_ID \
  WHERE NAME IN (?) GROUP BY ITEM_ID HAVING COUNT(ITEM_ID) = ?

#ItemComment dao
itemComment.findById = SELECT IC.COMMENT_ID, IC.BODY_TEXT, IC.POST_TIME, IC.AUTHOR_ID, IC.ITEM_ID \
  FROM ITEM_COMMENT IC \
  WHERE COMMENT_ID = ?
itemComment.findCommentsByItemId = SELECT IC.COMMENT_ID AS commentId, IC.BODY_TEXT AS bodyText, IC.POST_TIME as postTime, UU.LOGIN as login, UU.IMAGE_FILEPATH as imageFilepath \
  FROM ITEM_COMMENT IC \
  INNER JOIN UUSER UU ON UU.USER_ID = IC.AUTHOR_ID \
  WHERE ITEM_ID = ?
itemComment.delete=DELETE FROM ITEM_COMMENT \
  WHERE COMMENT_ID = ?